#+ORGA_PUBLISH_KEYWORD: PUBLISHED
#+TODO: DRAFT | PUBLISHED
#+STARTUP: fold
#+TAGS: emacs(e) arduino(a) web(w) orgMode(o)


* PUBLISHED Create a blog using Gatsby and Org-mode :emacs:web:orgMode:
CLOSED: [2020-12-24 Thu 16:46]
:PROPERTIES:
:IMAGE: ./images/org-mode-gatsby.png
:CATEGORY: Lesson
:DESCRIPTION: Membuat blog gatsby menggunakan org-mode
:END:

** Org-mode
[[https://orgmode.org/][Org mode]] adalah sebuah mode /text markup/ dalam emacs. Kemampuannya meliputi /note taking/, daftar /todos/, perencanaan proyek, /authoring project/, [[https://en.wikipedia.org/wiki/Literate_programming][/literate programming/]], dsb -- dalam sistem text yang cepat dan efisien. Fitur-fiturnya banyak yang tidak dimiliki oleh /text markup/ lainnya, seperti Markdown.

Namun, kelemahan org-mode dibandingkan dengan Markdown adalah /learning curve/ yang lebih tinggi, dan penggunaanya yang biasanya terbatas pada emacs. Hal ini menyebabkan Markdown lebih populer dan lebih banyak digunakan di banyak tempat, seperti file README github, dan konten blog [[https://www.gatsbyjs.com/docs/][gatsby]]. File org-mode sendiri sebenarnya dapat dikonversikan menjadi file markdown, tetapi menurut saya hal itu menambah proses dalam membangun sebuah blog. Untungnya telah tersedia sebuah plugin ~gatsby-transformer-orga~ dalam gatsby yang berfungsi mengkonversikan file org-mode menjadi html. Berikut adalah proses saya dalam membangun blog ini. Disini saya menggunakan Arch Linux.

-----
** Setup Gatsby
- Install ~npm~ dan ~node-js~.
  #+begin_src bash
  sudo pacman -S npm nodejs
  #+end_src

- Install ~gatsby-cli~ secara global.
  #+begin_src bash
npm install -g gatsby-cli
  #+end_src

- Buat proyek ~gatsby~ baru.
  Sebenarnya telah tersedia sebuah [[gatsby-site https://github.com/orgapp/gatsby-starter-blorg ][starter project]] yang sudah terdapat semua yang dibutuhkan untuk membuat blog gatsby dan org-mode.  Karena saya ingin membangun blog ini dari dasar, maka saya menggunakan [[https://github.com/gatsbyjs/gatsby-starter-hello-world][starter hello world]]. Dan proyek baru ini saya beri nama ~blorg~.

  #+begin_src bash
gatsby new blorg https://github.com/gatsbyjs/gatsby-starter-hello-world
  #+end_src

- Install plugin.
  Masuk ke dalam folder ~blorg~ yang baru dibuat. dan install library ~gatsby-transformer-orga~ dan ~gatsby-source-filesystem~.

  #+begin_src bash
  npm install --save gatsby-transformer-orga gatsby-source-filesystem
  #+end_src

  -----
** Konfigurasi Blorg
Setelah semua terinstall, buka file ~gasby-config.js~ menggunakan editor text kesayangan kita semua, yang tentu saja emacs, lalu tambahkan kode berikut.
#+BEGIN_SRC js
module.exports = {
    siteMetadata: {
        title: `Blog Title Placeholder`, // website default title
        siteUrl: `https://orga.js.org`, // domain of your site
        author: `Name Placeholder`, // your name
        description: `Description placeholder`, // description of website, for SEO
        twitter: 'galihWicaksono', // your twitter handle, you can set it to false or ignore it to get rid of the "Tweet this." button
        social: [ // your social badges, in your bio
            { name: 'twitter', url: 'https://twitter.com/galihwicaksono' },
            { name: 'website', url: 'https://galihwicaksono.com' },
            { name: 'email', url: 'mailto:galihwicaksono90@gmail.com' },
        ],
    },
    plugins: [
    {
        resolve: `gatsby-source-filesystem`,
        options: {
        // name: `pages`,
        path: `${__dirname}/src/posts/`,
        },
    },
    `gatsby-transformer-orga`,
    ],
}
#+END_SRC

Objek ~emacsiteMetadata~ berisikan data informasi tentang website yang sedang dibuat. Data ini nantinya dapat diakses dari semua page yang kita buat menggunakan ~graphql~. Opsi ~path~ pada plugin ~gatsby-souce-filesystem~ ditujukan pada folder yang berisikan file org-mode yang akan dijadikan konten blog.

Buat folder baru di dalam folder ~/src/~ dengan nama ~posts~. Disini kita dapat membuat setiap postingan berdasarkan file org-mode, atau berdasarkan /header/ file org-mode. Untuk postingan berbasis /header/, tambahkan baris berikut pada /header/ file org-mode. Untuk setiap /header/ yang sudah memiliki status ~PUBLISHED~ akan dibuatkan satu blog post.
-----

** Org Files
Objek ~emacsiteMetadata~ berisikan data informasi tentang website yang sedang dibuat. Data ini nantinya dapat diakses dari semua page yang kita buat menggunakan ~graphql~. Opsi ~path~ pada plugin ~gatsby-souce-filesystem~ ditujukan pada folder yang berisikan file org-mode yang akan dijadikan konten blog.

Buat folder baru di dalam folder ~/src/~ dengan nama ~posts~. Disini kita dapat membuat setiap postingan berdasarkan file org-mode, atau berdasarkan /header/ file org-mode. Untuk postingan berbasis /header/, tambahkan baris berikut pada /header/ file org-mode. Untuk setiap /header/ yang sudah memiliki status ~PUBLISHED~ akan dibuatkan satu blog post.

[[file:images/org-post.png][org-post]]
-----
** Membuat List Semua Post

Edit file ~index.js~ dalam folder ~/src/pages/~.

#+begin_src js
import React from 'react'
import {graphql, Link} from 'gatsby';

const Home = ({data}) => {
    const { edges } = data.allrOrgContent
    return (
        <ul>
            {edges.map(({node}) => (
                <li key={node.id}>
                    <h1>
                        <Link to={`/blog/${node.metadata.export_file_name}`}>{node.metadata.title}</Link>
                    </h1>
                    <p>{node.metadata.description}</p>
                </li>
            ))}
        </ul>
    )
}

export const query = graphql`
  query blogQuery {
    allOrgContent(sort: { fields: metadata___date, order: DESC }) {
      edges {
        node{
          id
          metadata {
            title
            export_file_name
            description
          }
        }
      }
    }
  }
`

export default Home
#+end_src

[[file:./images/blog.png]]
-----
** Blog Template
Buat folder baru dalam folder ~/src/~ dengan nama ~templates~, dan buat file dengan nama ~blogTemplate.js~ di dalam folder tersebut. Masukkan kode berikut.

#+begin_src js
import React from "react"
import { graphql } from "gatsby"

const BlogTemplate = ({ data }) => {
  const { title, date } = data.orgContent.metadata
  const { html } = data.orgContent
  console.log(html)

  return (
    <div>
      <h1>{title}</h1>
      <h5>{date}</h5>
      <div dangerouslySetInnerHTML={{ __html: html }} />
    </div>
  )
}

export const pageQuery = graphql`
  query BlogPostQuery($id: String!) {
    orgContent(id: { eq: $id }) {
      html
      metadata {
        title
        date(formatString: "DD MMMM YYYY")
      }
    }
  }
`

export default BlogTemplate

#+end_src

-----
** Membuat Post Secara Otomatis
Buat file dengan name ~gatsby-node.js~ di folder ~root~. Lalu tambahkan baris kode berikut.
#+begin_src js
const path = require("path")
const blogTemplate = require.resolve("./src/templates/blogTemplate.js")

exports.createPages = async ({ actions, graphql }) => {
  const { createPage } = actions

  const result = await graphql(`
    query orgContentQuery {
      allOrgContent {
        edges {
          node {
            id
            metadata {
              export_file_name
            }
          }
        }
      }
    }
  `)
  if (result.errors) {
    reporter.panic(result.errors)
  }

  result.data.allOrgContent.edges.forEach(({ node }) =>
    createPage({
      path: `/blog/${node.metadata.export_file_name}`,
      component: blogTemplate,
      context: {
        id: node.id,
      },
    })
  )
}

#+end_src
[[./images/blog-template.png]]

-----

* PUBLISHED BIOS Flasing using arduino :arduino:
CLOSED: [2021-01-01 Fri 22:25]
:PROPERTIES:
:IMAGE:         ./images/arduino.jpg
:DESCRIPTION:   Laptop stuck at boot.
:AUTHOR:        Galih Wicaksono
:END:

I have been using Arch Linux for a year now. It is the longest distro that I have been using. But as anybody knows, you can't just settle on one distro. So I tried to install Gentoo. It wasn't as easy as any other distros that I installed before. It even manage to make my laptop stuck in the Acer logo.

So this is what i did. After resetting CMOS, and because of the laptop displayed something, i concluded that it was a BIOS initialization failure. I didn't know wether it was some corrupted data in the EEPROM or the EEPROM chip itself failed. The chip was a [[https://www.winbond.com/resource-files/w25q32bv_revi_100413_wo_automotive.pdf][WINBOND W25Q32BV]]. Then I listed some options that I could do:

1. Go to a repair shop, be told that "ini harus ganti motherboardnya mas,"  and spend god knows how much money. Bunch of blood sucking leeches.
2. Buy a pre-flashed chip for Rp.85,000. Solder it myself and be done with it. This option includes the risk of buying a wrong one.
3. Buy an empty chip, a CH341a EEPROM programmer, flash the chip and solder it. The potiential cost was Rp.10.000 for the chip and Rp.40.000 for the flasher.
4. Assuming that the chip is fine, why don't I just make everything up myself? EEPROMs are not particularly complicated, I already have everything I needed: I have an arduino and I could potentially learn how SPI protocol works, how binary stored in memory, how hex data works and a bunch of other things. Best of all, I won't spend a dime. It was perfect. Or so i thought.

All things considered, i choose the last option because it won't break anything (sort of). And if this doesn't work, i could do the other options.

Now, what is SPI?

* PUBLISHED Tutorial install NGINX PHP dan MariaDB di windows
CLOSED: [2021-02-12 Fri 13:45]
:PROPERTIES:
:IMAGE:         ./images/php.png
:DESCRIPTION:   Menginstall php memang sangat membingungkan
:AUTHOR:        Galih Wicaksono
:END:

** Intall NGINX
Download NGINX di [[https://nginx.org/en/docs/windows.html][link ini]]. Pilih ~nginx/Windows-1.19.6~ untuk versi Windows. Buat folder baru di dalam drive c: dengan nama nginx. Ekstrak file yang sudah diunduh tadi ke dalam folder tersebut. Jalankan command line, lalu ketik perintah berikut untuk masuk ke dalam folder nginx, dan untuk menjalankan aplikasi nginx.
#+begin_src sh
cd C:\nginx
nginx.exe
#+end_src
** Konfigurasi NGINX
Buka file ~C:/nginx/conf/nginx.conf~ menggunakan text editor kesayangan anda. Uncomment (hapus karakter # disetiap baris) dan edit baris-baris berikut.
#+begin_src conf
location ~ .php$ {
    root html;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}
#+end_src

Dan juga edit baris-baris berikut.
#+begin_src conf
location / {
    root html;
    index.html index.htm;
}
#+end_src

menjadi

#+begin_src conf
location / {
    root html;
    index.php index.html index.htm;
}
#+end_src


Buka browser, dan buka alamat ~127.0.0.1~. Apabila terinstall dengan benar, maka akan muncul tampilan sebagai berikut.

[[file:images/nginx-welcome-screen.png][nginx]]

Sebagai catatan, perintah-perintah dibawah dapat dijalankan untuk mengatur nginx.
#+begin_src sh
nginx.exe -s stop
nginx.exe -s qite
nginx.exe -s reload
nginx.exe -s reopen
#+end_src

** Install PHP
Download php dari [[https://windows.php.net/download/][link ini]]. Pilih versi Non Thread Safe dengan versi x86 untuk windows 32bit atau versi x64 untuk windows 64bit. Di dalam folder nginx, buatlah folder baru dengan nama php. Ekstrak file yang sudah diunduh ke dalam folder tersebut. Buat folder baru di dalam folder ~C:\nginx\logs~ dengan nama php. Ubah file ~config.ini-production~ di dalam folder ~C:\nginx\php\~  menjadi ~php.ini~. 
** Konfigurasi PHP
Buka file php.ini di dalam folder C:\nginx\php dengan text editor. Uncomment ( hapus karakter ; )  dari tiap baris berikut.
#+begin_src php
extension=bz2
extension=curl
extension=gd2
extension=gettext
extension=imap
extension=mbstring
extension=exif
extension=mysqli
extension=openssl
extension=sqlite3
#+end_src

Buka command line baru, dan masukkan perintah berikut.
#+begin_src sh
cd C:/nginx/php
php-cgi.exe -b 9000
#+end_src

Untuk menghentikan applikasi php-cgi.exe ini, tekan tombol ctrl+c.

** index.php File
Di dalam folder C:\nginx\html buat file baru dengan nama index.php. Dengan menggunakan text editor, tambahkan kode berikut.
#+begin_src html
<?php
   phpinfo()
?>
#+end_src

Pada command prompt nginx tadi, masukkan perintah.
#+begin_src sh
nginx.exe -s reload
#+end_src

Buka browser, dan masukkan alamat 127.0.0.1:9000

[[file:images/phpinfo.png][phpinfo]]
